/////////////////////////////////////////////////////////////////////////////
// appbase.h
//
// Application base class methods definitions
/////////////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include "appbase.h"

/////////////////////////////////////////////////////////////////////////////
ApplicationBase * ApplicationBase::m_application = NULL;

/////////////////////////////////////////////////////////////////////////////
ApplicationBase * ApplicationBase::GetSingleton()
{
    return m_application;
}

/////////////////////////////////////////////////////////////////////////////
ApplicationBase::ApplicationBase(const ArgumentsList & args_list):
m_args_list(args_list)
{
    printf("ApplicationBase constructor\n");
}

/////////////////////////////////////////////////////////////////////////////
ApplicationBase::~ApplicationBase()
{
    printf("ApplicationBase destructor\n");
}
   
///////////////////////////////////////////////////////////////////////////// 
void ApplicationBase::Init()
{
    printf("ApplicationBase Init\n");
}

/////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Run()
{
    printf("ApplicationBase Run\n");
}

/////////////////////////////////////////////////////////////////////////////
void ApplicationBase::Release()
{
    printf("ApplicationBase Release\n");
}
   
///////////////////////////////////////////////////////////////////////////// 
void ApplicationBase::Render()
{
    printf("ApplicationBase Render\n");
}

/////////////////////////////////////////////////////////////////////////////
unsigned int ApplicationBase::GetInputArgumentsCount() const
{
    return m_args_list.arguments_count;
}

/////////////////////////////////////////////////////////////////////////////
const char * ApplicationBase::GetInputArgument(unsigned int idx) const
{
    if (idx >= m_args_list.arguments_count) return NULL;
    
    return & m_args_list.agruments_list[idx];
}
/////////////////////////////////////////////////////////////////////////////

